buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-bintray-plugin:2.2.4'
    }
}

plugins {
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'nebula.maven-publishing' version '3.0.2'
    id 'nebula.apache-license-pom' version '3.0.2'
    id 'nebula.javadoc-jar' version '3.0.2'
    id 'nebula.source-jar' version '3.0.2'
    id 'nebula.info' version '2.2.4'
    id 'nebula.contacts' version '2.2.0'
    id 'nebula.nebula-release' version '2.2.6'
    id 'com.gradle.plugin-publish' version '0.9.1'
    id 'com.github.kt3k.coveralls' version '2.4.0'
}

apply plugin: 'nebula.nebula-bintray'

description 'Gradle plugin to setup nebula-plugin'

group = 'com.netflix.nebula'

contacts {
    'justin@halfempty.org' {
        moniker 'Justin Ryan'
        github 'quidryan'
    }
    'rob.spieldenner@gmail.com' {
        moniker 'Rob Spieldenner'
        github 'rspieldenner'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.netflix.nebula:nebula-bintray-plugin:2.2.+'
    compile 'com.netflix.nebula:nebula-release-plugin:2.2.+'
    compile 'org.ajoberstar:gradle-git' // using these but just want the version used by nebula-release-plugin
    testCompile 'org.ajoberstar:grgit'
    testCompile('com.netflix.nebula:nebula-test:2.2.+') {
        exclude group: 'org.codehaus.groovy'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/nebula-publishing-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/nebula-publishing-plugin.git'

    plugins {
        pluginplugin {
            id = 'nebula.plugin-plugin'
            displayName = 'Nebula Plugin Plugin'
            description = 'Sets up publishing and release process for all of the other nebula plugins'
            tags = ['nebula', 'plugin']
        }
    }

    mavenCoordinates {
        groupId = 'com.netflix.nebula'
        artifactId = 'nebula-plugin-plugin'
    }
}

// while using 2.2.x branch of nebula-bintray-plugin, and 3.x of nebula-publishing-plugin need to configure publication
bintray {
    publications = ['nebula']
}

// Wire up build and publishing process
project.tasks.getByName('verifyReleaseStatus').actions.clear()
project.tasks.getByName('verifySnapshotStatus').actions.clear()

tasks.matching { it.name == 'bintrayUpload' || it.name == 'artifactoryPublish'}.all { Task task ->
    task.mustRunAfter('build')
    tasks.release.dependsOn(task)
}

tasks.matching { it.name == 'bintrayUpload' }.all { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':final') || graph.hasTask(':candidate')
        }
    }
}

project.tasks.matching { it.name == 'artifactoryPublish'}.all { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':snapshot')
        }
    }
}

import org.ajoberstar.gradle.git.release.base.ReleasePluginExtension
ReleasePluginExtension releaseExtension = project.extensions.findByType(ReleasePluginExtension)
releaseExtension.with {
    defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}

if (project.hasProperty('release.travisci') && project.property('release.travisci').toBoolean()) {
    project.tasks.release.deleteAllActions()
    project.tasks.prepare.deleteAllActions()
    nebulaRelease {
        addReleaseBranchPattern(/HEAD/)
        addReleaseBranchPattern(/v?\d+\.\d+\.\d+/)
        addReleaseBranchPattern(/gradle-\d+\.\d+/)
    }
}
