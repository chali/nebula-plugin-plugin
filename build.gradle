buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'nebula.maven-publish' version '4.4.4'
    id 'nebula.maven-apache-license' version '4.4.4'
    id 'nebula.javadoc-jar' version '4.4.4'
    id 'nebula.source-jar' version '4.4.4'
    id 'nebula.info' version '3.0.3'
    id 'nebula.contacts' version '3.0.1'
    id 'nebula.nebula-release' version '3.1.1'
    id 'nebula.nebula-bintray' version '3.1.0'
    id 'nebula.dependency-lock' version '4.2.0'
    id 'nebula.integtest' version '3.0.3'
    id 'com.gradle.plugin-publish' version '0.9.2'
    id 'com.github.kt3k.coveralls' version '2.4.0'
}

description 'Gradle plugin to setup nebula-plugin'

group = 'com.netflix.nebula'

contacts {
    'justin@halfempty.org' {
        moniker 'Justin Ryan'
        github 'quidryan'
    }
    'rob.spieldenner@gmail.com' {
        moniker 'Rob Spieldenner'
        github 'rspieldenner'
    }
    'dmthomas@gmail.com' {
        moniker 'Danny Thomas'
        github 'DanielThomas'
    }
}

dependencies {
    compile gradleApi()

    compile 'com.netflix.nebula:gradle-contacts-plugin:latest.release'
    compile 'com.netflix.nebula:gradle-dependency-lock-plugin:latest.release'
    compile 'com.netflix.nebula:gradle-extra-configurations-plugin:latest.release'
    compile 'com.netflix.nebula:gradle-info-plugin:latest.release'
    compile 'com.netflix.nebula:nebula-bintray-plugin:latest.release'
    compile 'com.netflix.nebula:nebula-publishing-plugin:latest.release'
    compile 'com.netflix.nebula:nebula-project-plugin:latest.release'
    compile 'com.netflix.nebula:nebula-release-plugin:latest.release'
    compile 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:latest.release'

    testCompile('com.netflix.nebula:nebula-test:latest.release') {
        exclude group: 'org.codehaus.groovy'
    }
}

// This logic should be kept in sync with NebulaPluginPlugin

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}


test {
    jvmArgs "-XX:MaxPermSize=256m"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

tasks.withType(Test) { task ->
    jacocoTestReport.executionData += files("$buildDir/jacoco/${task.name}.exec")
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/nebula-plugin-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/nebula-plugin-plugin.git'

    plugins {
        pluginPlugin {
            id = 'nebula.plugin-plugin'
            displayName = 'Nebula Plugin Plugin'
            description = 'Sets up publishing and release process for all of the other nebula plugins'
            tags = ['nebula', 'plugin']
        }
    }

    mavenCoordinates {
        groupId = 'com.netflix.nebula'
        artifactId = 'nebula-plugin-plugin'
    }
}

project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    project.tasks.bintrayUpload.onlyIf {
        graph.hasTask(':final') || graph.hasTask(':candidate')
    }
    project.tasks.artifactoryPublish.onlyIf {
        graph.hasTask(':snapshot') || graph.hasTask(':devSnapshot')
    }
}
